# camera_emulator_720p.py
import time
import random
import math
import os
from datetime import datetime
from typing import Dict, List, Optional

class TextGraphics:
    """
    –ì—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    """
    
    @staticmethod
    def create_box(width: int, height: int, title: str = "") -> List[str]:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ —Å —Ä–∞–º–∫–æ–π"""
        lines = []
        # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
        lines.append("‚îå" + "‚îÄ" * (width - 2) + "‚îê")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        if title:
            title_line = f"‚îÇ {title:<{width-4}} ‚îÇ"
            lines.append(title_line)
            lines.append("‚îú" + "‚îÄ" * (width - 2) + "‚î§")
        
        # –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        for _ in range(height - 3 - (1 if title else 0)):
            lines.append("‚îÇ" + " " * (width - 2) + "‚îÇ")
        
        # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
        lines.append("‚îî" + "‚îÄ" * (width - 2) + "‚îò")
        return lines
    
    @staticmethod
    def draw_meter(value: float, max_value: float = 100.0, label: str = "", width: int = 50) -> str:
        """–†–∏—Å—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä"""
        bar_width = width - 25
        filled = int((value / max_value) * bar_width)
        bar = "[" + "‚ñà" * filled + "‚ñë" * (bar_width - filled) + "]"
        return f"{label:<15} {bar} {value:>6.1f}"

class NetworkEffects:
    """
    –°–µ—Ç–µ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    """
    
    @staticmethod
    def apply_network_effects(packet_loss_rate: float, latency_ms: float, jitter_ms: float, freeze_probability: float) -> Dict:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        effects = {
            'packet_lost': False,
            'actual_latency': 0.0,
            'freeze_occurred': False,
            'frame_skipped': False
        }
        
        # –≠–º—É–ª—è—Ü–∏—è –ø–æ—Ç–µ—Ä—å –ø–∞–∫–µ—Ç–æ–≤
        if random.random() < packet_loss_rate:
            effects['packet_lost'] = True
            return effects
        
        # –≠–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
        effects['actual_latency'] = latency_ms + random.uniform(-jitter_ms, jitter_ms)
        time.sleep(max(0, effects['actual_latency']) / 1000.0)
        
        # –≠–º—É–ª—è—Ü–∏—è –ø—Ä–æ–ø—É—Å–∫–∞ –∫–∞–¥—Ä–∞
        if random.random() < packet_loss_rate * 2:
            effects['frame_skipped'] = True
        
        # –≠–º—É–ª—è—Ü–∏—è —Ñ—Ä–∏–∑–∞
        if random.random() < freeze_probability:
            freeze_time = random.uniform(0.05, 0.5)
            time.sleep(freeze_time)
            effects['freeze_occurred'] = True
        
        return effects

class CameraEmulator720p:
    """
    –≠–º—É–ª—è—Ç–æ—Ä –∫–∞–º–µ—Ä—ã 1280√ó720 @ 25FPS
    """
    
    def __init__(self, actual_width: int = 1280, actual_height: int = 720, target_fps: int = 25,
                 text_width: int = 80, text_height: int = 24):
        
        # –†–µ–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
        self.actual_width = actual_width
        self.actual_height = actual_height
        self.target_fps = target_fps
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        self.text_width = min(text_width, 100)
        self.text_height = min(text_height, 30)
        
        self.is_running = False
        self.frame_count = 0
        self.start_time = 0
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∏ –¥–ª—è 720p
        self.network_params = {
            'packet_loss': 0.001,           # 0.1%
            'latency_ms': 15.0,             # milliseconds
            'jitter_ms': 3.0,               # milliseconds
            'freeze_probability': 0.001,    # 0.1%
            'bitrate_kbps': 2500,           # kilobits per second (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –¥–ª—è 720p)
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'frames_generated': 0,
            'frames_displayed': 0,
            'frames_lost': 0,
            'frames_skipped': 0,
            'total_latency': 0.0,
            'freezes_detected': 0,
            'start_time': 0,
            'min_fps': float('inf'),
            'max_fps': 0,
        }
        
        self.current_pattern = "stream_info"
        self.patterns = ["stream_info", "network_monitor", "quality_meter", "simple_visual"]
        
        print("üé• –≠–º—É–ª—è—Ç–æ—Ä –∫–∞–º–µ—Ä—ã 1280√ó720 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"üìè –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {actual_width}√ó{actual_height}")
        print(f"üéûÔ∏è  –¶–µ–ª–µ–≤–æ–π FPS: {target_fps}")
        print(f"üîç –¢–µ–∫—Å—Ç–æ–≤—ã–π –º–∞—Å—à—Ç–∞–±: {text_width}√ó{text_height}")
    
    def set_network_parameters(self, 
                             packet_loss: float = 0.1,
                             latency_ms: float = 15.0,
                             jitter_ms: float = 3.0,
                             freeze_probability: float = 0.1,
                             bitrate_kbps: float = 2500):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–µ—Ç–∏ –¥–ª—è 720p
        """
        self.network_params = {
            'packet_loss': max(0.0, min(5.0, packet_loss)) / 100.0,
            'latency_ms': max(0.0, latency_ms),
            'jitter_ms': max(0.0, jitter_ms),
            'freeze_probability': max(0.0, min(5.0, freeze_probability)) / 100.0,
            'bitrate_kbps': max(500, bitrate_kbps),
        }
        
        print("\nüîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:")
        print(f"   üìâ –ü–æ—Ç–µ—Ä–∏ –ø–∞–∫–µ—Ç–æ–≤: {packet_loss}%")
        print(f"   ‚è±Ô∏è  –ó–∞–¥–µ—Ä–∂–∫–∞: {latency_ms}ms")
        print(f"   üìè –î–∂–∏—Ç—Ç–µ—Ä: {jitter_ms}ms")
        print(f"   ‚ùÑÔ∏è  –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ñ—Ä–∏–∑–∞: {freeze_probability}%")
        print(f"   üìä –ë–∏—Ç—Ä–µ–π—Ç: {bitrate_kbps} kbps")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è 720p
        recommended = self._get_recommended_bitrate()
        if bitrate_kbps < recommended['min']:
            print(f"   ‚ö†Ô∏è  –ù–∏–∑–∫–∏–π –±–∏—Ç—Ä–µ–π—Ç! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: {recommended['min']}-{recommended['max']} kbps")
        elif bitrate_kbps > recommended['max']:
            print(f"   üí° –í—ã—Å–æ–∫–∏–π –±–∏—Ç—Ä–µ–π—Ç! –û–ø—Ç–∏–º–∞–ª—å–Ω–æ: {recommended['optimal']} kbps")
        else:
            print(f"   ‚úÖ –ë–∏—Ç—Ä–µ–π—Ç –≤ –Ω–æ—Ä–º–µ. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommended['optimal']} kbps")
    
    def _get_recommended_bitrate(self) -> Dict:
        """–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –±–∏—Ç—Ä–µ–π—Ç—ã –¥–ª—è 720p"""
        return {
            'min': 1500,
            'optimal': 2500,
            'max': 4000
        }
    
    def set_display_pattern(self, pattern: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if pattern in self.patterns:
            self.current_pattern = pattern
            print(f"üé® –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern}")
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(self.patterns)}")
    
    def _clear_screen(self):
        """–û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞"""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def _generate_stream_info_frame(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–¥—Ä–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Ç–æ–∫–µ"""
        lines = TextGraphics.create_box(self.text_width, self.text_height, 
                                      "üé• 720p VIDEO STREAM")
        
        # –†–∞—Å—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞
        quality_score = self._calculate_quality_score()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_lines = [
            f"Frame: {self.frame_count:06d}",
            f"Time: {datetime.now().strftime('%H:%M:%S')}",
            f"Resolution: {self.actual_width}√ó{self.actual_height}",
            f"FPS: {self.target_fps}",
            f"Pattern: {self.current_pattern}",
            "",
            "üìä –°–ï–¢–ï–í–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:",
            f"  Bitrate:     {self.network_params['bitrate_kbps']:5d} kbps",
            f"  Packet Loss: {self.network_params['packet_loss']*100:5.2f}%",
            f"  Latency:     {self.network_params['latency_ms']:5.1f}ms",
            f"  Jitter:     ¬±{self.network_params['jitter_ms']:4.1f}ms",
            f"  Freeze Prob: {self.network_params['freeze_probability']*100:5.2f}%",
            "",
            "üéØ –ö–ê–ß–ï–°–¢–í–û –ü–û–¢–û–ö–ê:",
            f"  Score: {quality_score:.1f}/100",
            f"  Status: {self._get_quality_status(quality_score)}",
        ]
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        for i, info in enumerate(info_lines):
            if i + 2 < len(lines):
                lines[i + 2] = f"‚îÇ {info:<{self.text_width-4}} ‚îÇ"
        
        # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        anim_pos = (self.frame_count * 2) % (self.text_width - 10)
        anim_line = "  " + " " * anim_pos + "‚ñà‚ñà‚ñà" + " " * (self.text_width - anim_pos - 15)
        if len(lines) > self.text_height - 2:
            lines[self.text_height - 2] = f"‚îÇ{anim_line}‚îÇ"
        
        return lines
    
    def _generate_network_monitor_frame(self) -> List[str]:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        lines = TextGraphics.create_box(self.text_width, self.text_height, 
                                      "üìä NETWORK MONITOR")
        
        # –†–∞—Å—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞
        quality_score = self._calculate_quality_score()
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        indicators = [
            TextGraphics.draw_meter(self.network_params['bitrate_kbps'], 5000, "Bitrate", self.text_width - 4),
            TextGraphics.draw_meter(self.network_params['packet_loss'] * 100, 5, "Packet Loss", self.text_width - 4),
            TextGraphics.draw_meter(self.network_params['latency_ms'], 100, "Latency", self.text_width - 4),
            TextGraphics.draw_meter(self.network_params['jitter_ms'], 20, "Jitter", self.text_width - 4),
            TextGraphics.draw_meter(quality_score, 100, "Quality", self.text_width - 4),
        ]
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        for i, indicator in enumerate(indicators):
            if i + 2 < len(lines):
                lines[i + 2] = f"‚îÇ {indicator} ‚îÇ"
        
        # –ü—Ä–æ—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
        if len(lines) > self.text_height - 3:
            graph_line = "‚îÇ "
            for i in range(self.text_width - 4):
                time_point = (self.frame_count + i) * 0.1
                value = 50 + 40 * math.sin(time_point * 0.3)
                graph_line += "‚ñà" if value > 70 else "‚ñë"
            graph_line += " ‚îÇ"
            lines[self.text_height - 3] = graph_line
        
        # –°—Ç–∞—Ç—É—Å
        status = self._get_quality_status(quality_score)
        status_line = f"Status: {status} | Frame: {self.frame_count}"
        if len(lines) > self.text_height - 2:
            lines[self.text_height - 2] = f"‚îÇ {status_line:<{self.text_width-4}} ‚îÇ"
        
        return lines
    
    def _generate_quality_meter_frame(self) -> List[str]:
        """–ò–∑–º–µ—Ä–∏—Ç–µ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ—Ç–æ–∫–∞"""
        lines = TextGraphics.create_box(self.text_width, self.text_height, 
                                      "üéØ QUALITY METER")
        
        # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_score = self._calculate_quality_score()
        stability_score = self._calculate_stability_score()
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        indicators = [
            TextGraphics.draw_meter(quality_score, 100, "Overall", self.text_width - 4),
            TextGraphics.draw_meter(stability_score, 100, "Stability", self.text_width - 4),
            TextGraphics.draw_meter(100 - self.network_params['packet_loss'] * 1000, 100, "Reliability", self.text_width - 4),
            TextGraphics.draw_meter(max(0, 100 - self.network_params['latency_ms']), 100, "Latency", self.text_width - 4),
        ]
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        for i, indicator in enumerate(indicators):
            if i + 2 < len(lines):
                lines[i + 2] = f"‚îÇ {indicator} ‚îÇ"
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if len(lines) > self.text_height - 4:
            params_info = [
                f"Packet Loss: {self.network_params['packet_loss']*100:.2f}%",
                f"Latency: {self.network_params['latency_ms']:.1f}ms",
                f"Jitter: ¬±{self.network_params['jitter_ms']:.1f}ms",
                f"Freeze Risk: {self.network_params['freeze_probability']*100:.2f}%",
            ]
            
            for i, param in enumerate(params_info):
                line_idx = self.text_height - 6 + i
                if line_idx < len(lines):
                    lines[line_idx] = f"‚îÇ {param:<{self.text_width-4}} ‚îÇ"
        
        return lines
    
    def _generate_simple_visual_frame(self) -> List[str]:
        """–ü—Ä–æ—Å—Ç–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞"""
        lines = TextGraphics.create_box(self.text_width, self.text_height, 
                                      "üî≤ 720p VIDEO PREVIEW")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        for row in range(2, self.text_height - 1):
            if row < len(lines):
                visual_line = ""
                for col in range(1, self.text_width - 1):
                    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂—É—â–∏–π—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω
                    x = col / (self.text_width - 2)
                    y = row / (self.text_height - 2)
                    
                    time_val = self.frame_count * 0.2
                    pattern1 = math.sin(x * 10 + time_val) * 0.5
                    pattern2 = math.cos(y * 8 + time_val * 1.3) * 0.3
                    pattern3 = math.sin((x + y) * 15 + time_val * 0.7) * 0.2
                    
                    combined = pattern1 + pattern2 + pattern3
                    
                    if combined > 0.6:
                        visual_line += "‚ñà"
                    elif combined > 0.2:
                        visual_line += "‚ñì"
                    elif combined > -0.2:
                        visual_line += "‚ñí"
                    elif combined > -0.6:
                        visual_line += "‚ñë"
                    else:
                        visual_line += " "
                
                lines[row] = f"‚îÇ{visual_line}‚îÇ"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_line = f"1280√ó720 @ 25FPS | Frame: {self.frame_count} | Bitrate: {self.network_params['bitrate_kbps']}kbps"
        if len(lines) > self.text_height - 2:
            lines[self.text_height - 2] = f"‚îÇ {info_line:<{self.text_width-4}} ‚îÇ"
        
        return lines
    
    def _calculate_quality_score(self) -> float:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è 720p"""
        # –®—Ç—Ä–∞—Ñ—ã –∑–∞ –ø–ª–æ—Ö–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        loss_penalty = self.network_params['packet_loss'] * 800  # 1% –ø–æ—Ç–µ—Ä—å = -8 –ø—É–Ω–∫—Ç–æ–≤
        latency_penalty = min(25, self.network_params['latency_ms'] / 4)  # 40ms = -10 –ø—É–Ω–∫—Ç–æ–≤
        jitter_penalty = self.network_params['jitter_ms'] * 2.5  # 4ms jitter = -10 –ø—É–Ω–∫—Ç–æ–≤
        freeze_penalty = self.network_params['freeze_probability'] * 400  # 1% —Ñ—Ä–∏–∑–æ–≤ = -4 –ø—É–Ω–∫—Ç–æ–≤
        
        # –ë–æ–Ω—É—Å –∑–∞ —Ö–æ—Ä–æ—à–∏–π –±–∏—Ç—Ä–µ–π—Ç (–¥–ª—è 720p)
        bitrate_bonus = min(15, (self.network_params['bitrate_kbps'] - 1000) / 100)  # 2500kbps = +15 –ø—É–Ω–∫—Ç–æ–≤
        
        quality = 100 - loss_penalty - latency_penalty - jitter_penalty - freeze_penalty + bitrate_bonus
        return max(0, min(100, quality))
    
    def _calculate_stability_score(self) -> float:
        """–†–∞—Å—á–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Ç–æ–∫–∞"""
        stability = 100
        stability -= self.network_params['jitter_ms'] * 4  # –®—Ç—Ä–∞—Ñ –∑–∞ –¥–∂–∏—Ç—Ç–µ—Ä
        stability -= self.network_params['freeze_probability'] * 200  # –®—Ç—Ä–∞—Ñ –∑–∞ —Ñ—Ä–∏–∑—ã
        stability -= self.network_params['packet_loss'] * 300  # –®—Ç—Ä–∞—Ñ –∑–∞ –ø–æ—Ç–µ—Ä–∏
        return max(0, min(100, stability))
    
    def _get_quality_status(self, score: float) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞"""
        if score >= 85:
            return "üíé –û–¢–õ–ò–ß–ù–û"
        elif score >= 70:
            return "‚úÖ –•–û–†–û–®–û"
        elif score >= 55:
            return "‚ö†Ô∏è  –ù–û–†–ú–ê"
        elif score >= 40:
            return "‚ùå –ü–õ–û–•–û"
        else:
            return "üíÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ò"
    
    def generate_frame(self) -> Optional[List[str]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–¥—Ä–∞ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Å–µ—Ç–µ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–µ—Ç–∏
        effects = NetworkEffects.apply_network_effects(
            self.network_params['packet_loss'],
            self.network_params['latency_ms'], 
            self.network_params['jitter_ms'],
            self.network_params['freeze_probability']
        )
        
        if effects['packet_lost']:
            self.stats['frames_lost'] += 1
            return None
        
        if effects['frame_skipped']:
            self.stats['frames_skipped'] += 1
        
        self.stats['total_latency'] += effects['actual_latency']
        
        if effects['freeze_occurred']:
            self.stats['freezes_detected'] += 1
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–¥—Ä–∞
        if self.current_pattern == "stream_info":
            return self._generate_stream_info_frame()
        elif self.current_pattern == "network_monitor":
            return self._generate_network_monitor_frame()
        elif self.current_pattern == "quality_meter":
            return self._generate_quality_meter_frame()
        elif self.current_pattern == "simple_visual":
            return self._generate_simple_visual_frame()
        
        return self._generate_stream_info_frame()
    
    def display_frame(self, frame: List[str]):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–¥—Ä–∞"""
        self._clear_screen()
        for line in frame:
            print(line)
    
    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if self.stats['frames_displayed'] == 0:
            return self.stats
        
        elapsed = time.time() - self.stats['start_time']
        current_fps = self.stats['frames_displayed'] / elapsed
        
        # –û–±–Ω–æ–≤–ª—è–µ–º min/max FPS
        self.stats['min_fps'] = min(self.stats['min_fps'], current_fps)
        self.stats['max_fps'] = max(self.stats['max_fps'], current_fps)
        
        quality_score = self._calculate_quality_score()
        
        return {
            'total_frames': self.stats['frames_generated'],
            'frames_displayed': self.stats['frames_displayed'],
            'frames_lost': self.stats['frames_lost'],
            'packet_loss_rate': (self.stats['frames_lost'] / self.stats['frames_generated']) * 100 if self.stats['frames_generated'] > 0 else 0,
            'avg_latency': self.stats['total_latency'] / self.stats['frames_displayed'] if self.stats['frames_displayed'] > 0 else 0,
            'freezes_detected': self.stats['freezes_detected'],
            'current_fps': current_fps,
            'min_fps': self.stats['min_fps'],
            'max_fps': self.stats['max_fps'],
            'fps_stability': (current_fps / self.target_fps) * 100,
            'quality_score': quality_score,
            'quality_status': self._get_quality_status(quality_score),
            'elapsed_time': elapsed
        }
    
    def start_stream(self, duration: int = 30):
        """–ó–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞"""
        if self.is_running:
            print("‚ö†Ô∏è  –ü–æ—Ç–æ–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.is_running = True
        self.frame_count = 0
        self.stats = {
            'frames_generated': 0,
            'frames_displayed': 0,
            'frames_lost': 0,
            'frames_skipped': 0,
            'total_latency': 0.0,
            'freezes_detected': 0,
            'start_time': time.time(),
            'min_fps': float('inf'),
            'max_fps': 0,
        }
        
        print(f"\nüé• –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ 1280√ó720 @ {self.target_fps}FPS")
        print(f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫—É–Ω–¥")
        print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        time.sleep(1)
        
        end_time = time.time() + duration
        
        try:
            while self.is_running and time.time() < end_time:
                frame_start = time.time()
                self.stats['frames_generated'] += 1
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–¥—Ä
                frame = self.generate_frame()
                if frame is not None:
                    self.display_frame(frame)
                    self.stats['frames_displayed'] += 1
                    self.frame_count += 1
                
                # –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ FPS
                frame_time = time.time() - frame_start
                target_frame_time = 1.0 / self.target_fps
                sleep_time = max(0, target_frame_time - frame_time)
                time.sleep(sleep_time)
                
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        finally:
            self.is_running = False
            self._show_stats()
    
    def _show_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stats = self.get_statistics()
        
        print("\n" + "=" * 50)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–¢–û–ö–ê 720p")
        print("=" * 50)
        print(f"üéØ –í—Å–µ–≥–æ –∫–∞–¥—Ä–æ–≤: {stats['total_frames']}")
        print(f"‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ: {stats['frames_displayed']}")
        print(f"‚ùå –ü–æ—Ç–µ—Ä—è–Ω–æ: {stats['frames_lost']}")
        print(f"üìâ –ü–æ—Ç–µ—Ä–∏: {stats['packet_loss_rate']:.2f}%")
        print(f"‚è±Ô∏è  –ó–∞–¥–µ—Ä–∂–∫–∞: {stats['avg_latency']:.2f}ms")
        print(f"‚ùÑÔ∏è  –§—Ä–∏–∑–æ–≤: {stats['freezes_detected']}")
        print(f"üéûÔ∏è  FPS: {stats['current_fps']:.2f}")
        print(f"üìà Min/Max FPS: {stats['min_fps']:.2f}/{stats['max_fps']:.2f}")
        print(f"üéØ –ö–∞—á–µ—Å—Ç–≤–æ: {stats['quality_score']:.1f}/100")
        print(f"üèÜ –°—Ç–∞—Ç—É—Å: {stats['quality_status']}")
        print("=" * 50)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    emulator = CameraEmulator720p(
        actual_width=1280,
        actual_height=720, 
        target_fps=25,
        text_width=80,
        text_height=24
    )
    
    while True:
        print("\n" + "=" * 50)
        print("üé• –≠–ú–£–õ–Ø–¢–û–† –ö–ê–ú–ï–†–´ 1280√ó720 @ 25FPS")
        print("=" * 50)
        print("1. üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç")
        print("2. ‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        print("3. üé® –í—ã–±—Ä–∞—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ") 
        print("4. üìä –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Ç–æ–∫")
        print("5. üö™ –í—ã—Ö–æ–¥")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5): ").strip()
        
        if choice == '1':
            # –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è 720p
            emulator.set_network_parameters(
                packet_loss=0.1,
                latency_ms=15,
                jitter_ms=4,
                freeze_probability=0.05,
                bitrate_kbps=2500
            )
            emulator.set_display_pattern("stream_info")
            emulator.start_stream(20)
            
        elif choice == '2':
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            print("\n‚öôÔ∏è  –ù–ê–°–¢–†–û–ô–ö–ê –ü–ê–†–ê–ú–ï–¢–†–û–í –î–õ–Ø 720p")
            print("(–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
            
            packet_loss = input("–ü–æ—Ç–µ—Ä–∏ –ø–∞–∫–µ—Ç–æ–≤ % [0.1]: ") or "0.1"
            latency_ms = input("–ó–∞–¥–µ—Ä–∂–∫–∞ (ms) [15.0]: ") or "15.0"
            jitter_ms = input("–î–∂–∏—Ç—Ç–µ—Ä (ms) [4.0]: ") or "4.0"
            freeze_prob = input("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ñ—Ä–∏–∑–∞ % [0.05]: ") or "0.05"
            bitrate = input("–ë–∏—Ç—Ä–µ–π—Ç (kbps) [2500]: ") or "2500"
            
            emulator.set_network_parameters(
                packet_loss=float(packet_loss),
                latency_ms=float(latency_ms),
                jitter_ms=float(jitter_ms),
                freeze_probability=float(freeze_prob),
                bitrate_kbps=float(bitrate)
            )
            
        elif choice == '3':
            # –í—ã–±–æ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–∞
            print("\nüé® –í–´–ë–ï–†–ò–¢–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï:")
            for i, pattern in enumerate(emulator.patterns, 1):
                print(f"{i}. {pattern}")
            
            pattern_choice = input(f"–í—ã–±–µ—Ä–∏—Ç–µ (1-{len(emulator.patterns)}): ").strip()
            if pattern_choice.isdigit() and 1 <= int(pattern_choice) <= len(emulator.patterns):
                emulator.set_display_pattern(emulator.patterns[int(pattern_choice) - 1])
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                
        elif choice == '4':
            # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞
            duration = input("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫—É–Ω–¥) [20]: ") or "20"
            emulator.start_stream(int(duration))
            
        elif choice == '5':
            print("üëã –í—ã—Ö–æ–¥")
            break
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main()